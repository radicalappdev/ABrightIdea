#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["SelectedPointLight", "ImageBasedLight", "GridMaterial", "LightBulb", "Dome", "Floor", "FloorMat", "DomeMat"]
    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "LightBulb" (
        active = true
        references = @light-bulb-rad.usdc@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        float3 xformOp:translate = (0.99590325, 1.1888162, -1.2053841)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.0558661, 0.1049836, 0.0558661)
                float height = 0.10498358
                float radius = 0.027933048
                token shapeType = "Capsule"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 0.07172429, -5.401671e-8)
                }
            }
        }

        over "LightSource"
        {
        }

        over "GlassMat"
        {
            color3f inputs:Basecolor_Tint = (0.999996, 1, 1) (
                colorSpace = "srgb_texture"
            )
            token outputs:mtlx:surface.connect = </Root/LightBulb/GlassMat/PreviewSurface.outputs:out>
            token outputs:surface.connect = </Root/LightBulb/GlassMat/UsdPreviewSurface_1.outputs:surface>

            over "UsdPreviewSurface_1" (
                active = true
            )
            {
                color3f inputs:emissiveColor = (0.999996, 1, 1) (
                    colorSpace = "srgb_texture"
                )
            }

            over "PreviewSurface" (
                active = false
            )
            {
                float2 ui:nodegraph:node:pos = (520.9142, 343.2003)
                int ui:nodegraph:node:stackingOrder = 2303
            }

            over "Mix"
            {
                int ui:nodegraph:node:stackingOrder = 2306
            }
        }

        over "Base"
        {
            float3 xformOp:translate = (1.5483238e-8, -0.008224115, -0.00024247059)

            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/ImageBasedLight>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "Glass"
        {
            float3 xformOp:translate = (0, 0, 0)

            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/ImageBasedLight>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "BaseMat"
        {
            over "UsdPreviewSurface_1"
            {
                color3f inputs:emissiveColor = (0.69803923, 0.69803923, 0.69803923) (
                    colorSpace = "lin_srgb"
                )
            }
        }
    }

    def Sphere "Dome" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/DomeMat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 4.8
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "ImageBasedLightReceiver"
        {
            rel iblEntity = </Root/ImageBasedLight>
            uniform token info:id = "RealityKit.ImageBasedLightReceiver"
        }
    }

    def Cube "Floor" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/FloorMat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1
        float3 xformOp:scale = (10, 0.1, 10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Floor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "ImageBasedLightReceiver"
        {
            rel iblEntity = </Root/ImageBasedLight>
            uniform token info:id = "RealityKit.ImageBasedLightReceiver"
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1, 1, 1)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def "FloorMat" (
        active = true
        references = @SmoothConcrete.usdz@
    )
    {
        float2 inputs:UV_Scale = (10, 10)
    }

    def "DomeMat" (
        active = true
        references = @BlackABSPlastic.usdz@
    )
    {
        float2 inputs:UV_Scale = (10, 10)
    }

    def Xform "SelectedPointLight"
    {
        def RealityKitComponent "PointLight"
        {
            token info:id = "RealityKit.PointLight"
        }
    }

    def Xform "ImageBasedLight" (
        active = true
    )
    {
        def RealityKitComponent "ImageBasedLight"
        {
            asset ibl = @black-light.png@
            uniform token info:id = "RealityKit.ImageBasedLight"
            bool isGlobalIBL = 0
        }
    }
}

